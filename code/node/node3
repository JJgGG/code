2023年9月5日
（1）配置文件中的注意：
● 文本：
  ○ 单引号不会转义【\n 则为普通字符串显示】
  ○ 双引号会转义【\n会显示为换行符】
● 大文本
  ○ |开头，大文本写在下层，保留文本格式，换行符正确显示
  ○ >开头，大文本写在下层，折叠换行符
● 多文档合并
  ○ 使用---可以把多个yaml文档合并在一个文档中，每个文档区依然认为内容独立
#############
（2）日志配置：
1. Spring使用commons-logging作为内部日志，但底层日志实现是开放的。可对接其他日志框架。
  a. spring5及以后 commons-logging被spring直接自己写了。
2. 支持 jul，log4j2,logback。SpringBoot 提供了默认的控制台输出配置，也可以配置输出为文件。
3. logback是默认使用的。
4. 虽然日志框架很多，但是我们不用担心，使用 SpringBoot 的默认配置就能工作的很好。

SpringBoot怎么把日志默认配置好的
1、每个starter场景，都会导入一个核心场景spring-boot-starter
2、核心场景引入了日志的所用功能spring-boot-starter-logging
3、默认使用了logback + slf4j 组合作为默认底层日志
4、日志是系统一启动就要用，xxxAutoConfiguration是系统启动好了以后放好的组件，后来用的。
5、日志是利用监听器机制配置好的。ApplicationListener。
6、日志所有的配置都可以通过修改配置文件实现。以logging开始的所有配置。

##############
（3）日志格式
2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.7]
默认输出格式：
● 时间和日期：毫秒级精度
● 日志级别：ERROR, WARN, INFO, DEBUG, or TRACE.
● 进程 ID
● ---： 消息分割符
● 线程名： 使用[]包含
● Logger 名： 通常是产生日志的类名
● 消息： 日志记录的内容
注意： logback 没有FATAL级别，对应的是ERROR
###################
（4）日志级别
● 由低到高：ALL,TRACE, DEBUG, INFO, WARN, ERROR,FATAL,OFF；
  ○ 只会打印指定级别及以上级别的日志
  ○ ALL：打印所有日志
  ○ TRACE：追踪框架详细流程日志，一般不使用
  ○ DEBUG：开发调试细节日志
  ○ INFO：关键、感兴趣信息日志
  ○ WARN：警告但不是错误的信息日志，比如：版本过时
  ○ ERROR：业务错误日志，比如出现各种异常
  ○ FATAL：致命错误日志，比如jvm系统崩溃
  ○ OFF：关闭所有日志记录
● 不指定级别的所有类，都使用root指定的级别作为默认级别
● SpringBoot日志默认级别是 INFO
1. 在application.properties/yaml中配置logging.level.<logger-name>=<level>指定日志级别
2. level可取值范围：TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF，定义在 LogLevel类中
3. root 的logger-name叫root，可以配置logging.level.root=warn，代表所有未指定日志级别都使用 root 的 warn 级别
######################
遇到的问题，在新建文本中，文本文件出现？标识，并且不能打开，需要到setting中搜索file Types移除对应的文件。
######################
（5）日志分组
比较有用的技巧是：
将相关的logger分组在一起，统一配置。SpringBoot 也支持。比如：Tomcat 相关的日志统一设置
logging.group.tomcat=org.apache.catalina,org.apache.coyote,org.apache.tomcat
logging.level.tomcat=trace
SpringBoot 预定义两个组
Name	Loggers
web	org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans
sql	org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener
（6）文件输出
SpringBoot 默认只把日志写在控制台，如果想额外记录到文件，可以在application.properties中添加logging.file.name or logging.file.path配置项。
#######################
（7）文件归档与滚动切割
   归档：每天的日志单独存到一个文档中。
   切割：每个文件10MB，超过大小切割成另外一个文件。
   1. 每天的日志应该独立分割出来存档。如果使用logback（SpringBoot 默认整合），可以通过application.properties/yaml文件指定日志滚动规则。
   2. 如果是其他日志系统，需要自行配置（添加log4j2.xml或log4j2-spring.xml）
   3. 支持的滚动规则设置如下
   配置项	描述
   logging.logback.rollingpolicy.file-name-pattern	日志存档的文件名格式（默认值：${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz）
   logging.logback.rollingpolicy.clean-history-on-start	应用启动时是否清除以前存档（默认值：false）
   logging.logback.rollingpolicy.max-file-size	存档前，每个日志文件的最大大小（默认值：10MB）
   logging.logback.rollingpolicy.total-size-cap	日志文件被删除之前，可以容纳的最大大小（默认值：0B）。设置1GB则磁盘存储超过 1GB 日志后就会删除旧日志文件
   logging.logback.rollingpolicy.max-history	日志文件保存的最大天数(默认值：7).
############################
（8）自定义配置
通常我们配置 application.properties 就够了。当然也可以自定义。比如：
日志系统	自定义
Logback	logback-spring.xml, logback-spring.groovy,
logback.xml, or logback.groovy
Log4j2	log4j2-spring.xml or log4j2.xml
JDK (Java Util Logging)	logging.properties
如果可能，我们建议您在日志配置中使用-spring 变量（例如，logback-spring.xml 而不是 logback.xml）。如果您使用标准配置文件，spring 无法完全控制日志初始化。
最佳实战：自己要写配置，配置文件名加上 xx-spring.xml