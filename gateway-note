微服务网关概述
不同的微服务一般会有不同的网络地址，客户端在访问这些微服务时必须记住几十甚至几百个地址，这对于客户端方来说太复杂也难以维护。

如果让客户端直接与各个微服务通讯，可能会有很多问题：

客户端会请求多个不同的服务，需要维护不同的请求地址，增加开发难度
在某些场景下存在跨域请求的问题
加大身份认证的难度，每个微服务需要独立认证
因此，我们需要一个微服务网关，介于客户端与服务器之间的中坚层，所有的外部请求都会先经过微服务网关。客户端只需要与网关交互，只知道一个网关地址即可，这样简化了开发还有以下优点：
1、易于监控
2、易于认证
3、减少了客户端与各个微服务之间的交互次数

核心概念
路由（route）：路由是网关最基础的部分，路由信息由一个 ID、一个目的 URL、一组断言工厂和一组 Filter 组成。如果断言为真，则说明 请求 URL 和配置的路由匹配。
2、断言（predicates）：Java8 中的断言函数，SpringCloud Gateway 中的断言函数输入类型是 Spring 5.0 框架中的 ServerWebExchange。SpringCloud Gateway 中的断言函数允许开发者去定义匹配来自 HttpRequest 中的任何信息，比如请求头和参数等。
3、过滤器（Filter）：一个标准的 Spring WebFilter，SpringCloud Gateway 中的 Filter 分为两种类型，分别是 Gateway Filter 和 Global Filter。过滤器 Filter 可以对请求和响应进行处理。

web 请求，通过一些匹配条件，定位到真正的服务节点，并在这个转发过程的前后，进行一些精细化控制。Predicate 就是我们的匹配条件，而 Filter 就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标 URI，就可以实现一个具体的路由了。

SpringCloud Gateway 特性
基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0 进行构建
动态路由：能够匹配任何请求属性
可以对路由指定 Predicate（断言）和 Filter（过滤器）

集成 Hystrix 断路器功能(Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统中，
许多依赖在某些时候不可避免的发生失败，比如超时、异常等，Hystrix能够保证在一个依赖出现问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。)

集成 SpringCloud 服务发现功能
易于编写的 Predicate（断言）和 Filter（过滤器）
请求限流功能
支持路径重写

Gateway 的工作流程
客户端向 SpringCloud Gateway 发出请求，然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。
Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。
Filter 在“pre”类型的过滤器中可以做参数校验、权限校验、流量监控、日志输出、协议转换等。在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等。




