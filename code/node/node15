2023年9月12号
##################################
错误处理
1. 默认机制
错误处理的自动配置都在ErrorMvcAutoConfiguration中，两大核心机制：
● 1. SpringBoot 会自适应处理错误，响应页面或JSON数据
● 2. SpringMVC的错误处理机制依然保留，MVC处理不了，才会交给boot进行处理
####################################
规则：
1. 解析一个错误页
  a. 如果发生了500、404、503、403 这些错误
    ⅰ. 如果有模板引擎，默认在 classpath:/templates/error/精确码.html
    ⅱ. 如果没有模板引擎，在静态资源文件夹下找  精确码.html
  b. 如果匹配不到精确码.html这些精确的错误页，就去找5xx.html，4xx.html模糊匹配
    ⅰ. 如果有模板引擎，默认在 classpath:/templates/error/5xx.html
    ⅱ. 如果没有模板引擎，在静态资源文件夹下找  5xx.html
2. 如果模板引擎路径templates下有 error.html页面，就直接渲染
#####################################
自定义错误响应
1. 自定义json响应
使用@ControllerAdvice + @ExceptionHandler 进行统一异常处理
2. 自定义页面响应
根据boot的错误页面规则，自定义页面模板

3. 最佳实战
● 前后分离
  ○ 后台发生的所有错误，@ControllerAdvice + @ExceptionHandler进行统一异常处理。
● 服务端页面渲染
  ○ 不可预知的一些，HTTP码表示的服务器或客户端错误
    ■ 给classpath:/templates/error/下面，放常用精确的错误码页面。500.html，404.html
    ■ 给classpath:/templates/error/下面，放通用模糊匹配的错误码页面。 5xx.html，4xx.html
  ○ 发生业务错误
    ■ 核心业务，每一种错误，都应该代码控制，跳转到自己定制的错误页。
    ■ 通用业务，classpath:/templates/error.html页面，显示错误信息。
############################################
WebMvcConfigurer 功能
定义扩展SpringMVC底层功能
提供方法	核心参数	功能	默认
addFormatters	FormatterRegistry	格式化器：支持属性上@NumberFormat和@DatetimeFormat的数据类型转换	GenericConversionService
getValidator	无	数据校验：校验 Controller 上使用@Valid标注的参数合法性。需要导入starter-validator	无
addInterceptors	InterceptorRegistry	拦截器：拦截收到的所有请求	无
configureContentNegotiation	ContentNegotiationConfigurer	内容协商：支持多种数据格式返回。需要配合支持这种类型的HttpMessageConverter	支持 json
configureMessageConverters	List<HttpMessageConverter<?>>	消息转换器：标注@ResponseBody的返回值会利用MessageConverter直接写出去	8 个，支持byte，string,multipart,resource，json
addViewControllers	ViewControllerRegistry	视图映射：直接将请求路径与物理视图映射。用于无 java 业务逻辑的直接视图页渲染	无
<mvc:view-controller>
configureViewResolvers	ViewResolverRegistry	视图解析器：逻辑视图转为物理视图	ViewResolverComposite
addResourceHandlers	ResourceHandlerRegistry	静态资源处理：静态资源路径映射、缓存控制	ResourceHandlerRegistry
configureDefaultServletHandling	DefaultServletHandlerConfigurer	默认 Servlet：可以覆盖 Tomcat 的DefaultServlet。让DispatcherServlet拦截/	无
configurePathMatch	PathMatchConfigurer	路径匹配：自定义 URL 路径匹配。可以自动为所有路径加上指定前缀，比如 /api	无
configureAsyncSupport	AsyncSupportConfigurer	异步支持：	TaskExecutionAutoConfiguration
addCorsMappings	CorsRegistry	跨域：	无
addArgumentResolvers	List<HandlerMethodArgumentResolver>	参数解析器：	mvc 默认提供
addReturnValueHandlers	List<HandlerMethodReturnValueHandler>	返回值解析器：	mvc 默认提供
configureHandlerExceptionResolvers	List<HandlerExceptionResolver>	异常处理器：	默认 3 个
ExceptionHandlerExceptionResolver
ResponseStatusExceptionResolver
DefaultHandlerExceptionResolver
getMessageCodesResolver	无	消息码解析器：国际化使用	无

##############################################################
全面接管SpringMVC
● SpringBoot 默认配置好了 SpringMVC 的所有常用特性。
● 如果我们需要全面接管SpringMVC的所有配置并禁用默认配置，仅需要编写一个WebMvcConfigurer配置类，并标注 @EnableWebMvc 即可
● 全手动模式
  ○ @EnableWebMvc : 禁用默认配置
  ○ WebMvcConfigurer组件：定义MVC的底层行为